# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the $default-branch branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Terraform Deploy

on:
  workflow_dispatch: # Allows manual trigger of the entire workflow

jobs:
  authenticate:
    name: Authenticate with AWS
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write
    #   contents: read
    # steps:
    #   - uses: actions/checkout@v3
    #   - name: Configure AWS Credentials
    #     uses: aws-actions/configure-aws-credentials@v4
    #     with:
    #       role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
    #       aws-region: ${{ env.AWS_REGION }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }} 

  terraform_deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    needs: authenticate
    env:
      # Backend configuration via environment variables
      S3_BUCKET: ${{ secrets.TF_S3_BUCKET }}
      S3_KEY: ${{ secrets.TF_S3_KEY }}
      S3_REGION: ${{ secrets.AWS_REGION }}
      DYNAMODB_TABLE: ${{ secrets.TF_DYNAMODB_TABLE }}
      AWS_REGION: ${{ secrets.AWS_REGION }} 
      EC2_NAME: ${{ secrets.EC2_NAME }}
      MY_IP: ${{ secrets.MY_IP }}
      PRIVATE_KEY_NAME: ${{ secrets.PRIVATE_KEY_NAME }}


    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }} 

    - name: Install Terraform
      uses: little-core-labs/install-terraform@v2.0.0
      with:
        terraform_version: 1.7.0

    - name: Create Terraform Variables File
      run: |
        cat <<EOF > terraform.tfvars
        bucket = "${{ secrets.TF_S3_BUCKET }}"
        key = "${{ secrets.S3_KEY }}"
        region = "${{ secrets.S3_REGION }}"
        encrypt = true
        dynamodb_table = "${{ secrets.DYNAMODB_TABLE }}"
        aws_region = "${{ secrets.AWS_REGION }}"
        ec2_name = "${{ secrets.EC2_NAME }}"
        my_ip = "${{ env.MY_IP }}"
        EOF

    - name: Terraform Init
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ secrets.TF_S3_BUCKET }}" \
          -backend-config="key=${S3_KEY}" \
          -backend-config="region=${S3_REGION}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${DYNAMODB_TABLE}" 
    
    - name: Terraform Plan
      run: |
        terraform plan \
          -var="region=${AWS_REGION}" \
          -var="ec2_name=${EC2_NAME}" \
          -var="my_ip=${MY_IP}"

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve \
          -var="region=${AWS_REGION}" \
          -var="ec2_name=${EC2_NAME}" \
          -var="my_ip=${MY_IP}" 

    - name: Upload Private Key
      uses: actions/upload-artifact@v3
      with:
        name: private-key
        path: ${{ secrets.PRIVATE_KEY_NAME }}
        retention-days: 1  # Adjust as needed, default is 90





