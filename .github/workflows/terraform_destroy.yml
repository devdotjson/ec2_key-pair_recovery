name: Terraform Destroy

on:
  workflow_dispatch:

jobs:
  authenticate:
    name: Authenticate with AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: authenticate
    env:
      # Backend configuration via environment variables
      S3_BUCKET: ${{ secrets.TF_S3_BUCKET }}
      S3_KEY: ${{ secrets.TF_S3_KEY }}
      S3_REGION: ${{ secrets.AWS_REGION }}
      DYNAMODB_TABLE: ${{ secrets.TF_DYNAMODB_TABLE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: little-core-labs/install-terraform@v2.0.0
        with:
          terraform_version: 1.7.0

      - name: Create Terraform Variables File
        run: |
          cat <<EOF > terraform.tfvars
          bucket = "${{ secrets.TF_S3_BUCKET }}"
          key = "${{ secrets.S3_KEY }}"
          region = "${{ secrets.S3_REGION }}"
          encrypt = true
          dynamodb_table = "${{ secrets.DYNAMODB_TABLE }}"
          aws_region = "${{ secrets.AWS_REGION }}"
          ec2_name = "${{ secrets.EC2_NAME }}"
          my_ip = "${{ env.MY_IP }}"
          EOF

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -input=false \
            -var="region=${AWS_REGION}" \
            -var="ec2_name=${EC2_NAME}" \
            -var="my_ip=${MY_IP}" 

      - name: Delete Private Key Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_NAME: "private-key"
        run: |
          # Fetch the list of artifacts
          ARTIFACTS_JSON=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts)
          
          # Extract the artifact ID by name
          ARTIFACT_ID=$(echo "$ARTIFACTS_JSON" | jq -r --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name == $NAME) | .id')
          
          if [ -z "$ARTIFACT_ID" ] || [ "$ARTIFACT_ID" == "null" ]; then
            echo "Artifact '$ARTIFACT_NAME' not found or already deleted."
            exit 0
          fi
          
          # Delete the artifact
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID)
          
          if [ "$RESPONSE" -eq "204" ]; then
            echo "Artifact '$ARTIFACT_NAME' (ID: $ARTIFACT_ID) deleted successfully."
          else
            echo "Failed to delete artifact '$ARTIFACT_NAME' (ID: $ARTIFACT_ID). HTTP status code: $RESPONSE"
            exit 1
          fi